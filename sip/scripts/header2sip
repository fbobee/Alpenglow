#!/bin/bash
if [ "$#" -eq 0 ]
then
  echo "Usage:"
  echo "header2sip filename [overwrite]"
  echo "Convert c++ header to sip file and write to the standard output. If overwrite is set, the appropriate sip file will be (over)written instead of writing to the standard output."
  echo
  echo "header2sip filename compare"
  echo "Convert c++ header to sip file and compare side-to-side with the appropriate sip file. The diff will be written to the standard output."
  echo
  echo "header2sip directory [compare|overwrite]"
  echo "Find all c++ header files (.h files) in the directory and convert them. If overwrite is set, the appropriate sip file[s] will be (over)written and containing dirs will be created if needed instead of writing to the standard output."
  echo
  echo "header2sip"
  echo "Show this help and exit."
  exit
fi
if [ "$#" -ge 1 ]
then
  if [ -f $1 ]
  then
    mode="file"
  else if [ -d $1 ]
  then
    mode="dir"
  else
    echo "The first parameter must be a file or a directory."
    exit 1
  fi; fi
fi
compare="no"
overwrite="no"
if [ "$#" -ge 2 ]
then
  if [ "$2" == "overwrite" ]
  then
    overwrite="yes"
  else if [ "$2" == "compare" ]
  then
    compare="yes"
  else
    echo "The second parameter must be 'overwrite' or 'compare' if given."
    exit 1
  fi; fi
fi

script_dir=$(dirname $0)
tempfile=$(mktemp)

if [ $mode = "file" ]
then
  file_name_list="$1"
else #mode=dir
  file_name_list=$(find $1 -name "*.h")
  echo "Input files:"
  echo "$file_name_list"
fi
for file in $file_name_list
do
  local_file_path=$(echo $file | sed -r "s|.*main/||")
  cat $file \
  | sed "s|//.*||" \
  | sed "s/#.*//" \
  | sed "s/using.*//" \
  | sed '/^\s*$/d' \
  | sed '/^.*friend class.*$/d' \
  | sed '/^.*FRIEND_TEST.*$/d' \
  | python $script_dir/remove_initlist.py \
  | vim -E +"%normal t(f{d%a;" +%p -cq! /dev/stdin \
  | tr -d "\a" \
  | sed -r "s/^([^)]+)[[:space:]]*=[^;]*;/\1;/" \
  | python $script_dir/remove_private.py \
  | tr '\n' '\r' \
  | sed -r "s/class([^{].*)\{/class\1{\nTYPEHEADERCODE/" \
  | sed -r "s/struct([^{].*)\{/struct\1{\nTYPEHEADERCODE/" \
  | tr '\r' '\n' \
  | sed -r "s|TYPEHEADERCODE|  %TypeHeaderCode\n  #include \"$local_file_path\"\n  %End|g" \
  | sed -r "s/[[:space:]]string/ std::string/" \
  | sed -r "s|^(.*RankingScoreIterator)|//\1|" \
  | sed -r "s|^(.*UpdaterMessage)|//\1|" \
  | sed -r "s|^(.*stream)|//\1|" \
  | sed "s/override//g" \
  | sed -r "s/[[:space:]]*;([[:space:]]*;)*/;/" > $tempfile

  sipfilename=$(echo $file | sed -r "s/cpp/sip/" | sed -r "s|main/||" | sed "s/.h$/.sip/")
  if [ $overwrite = "yes" ]
  then
    mkdir -p $(dirname $sipfilename)
    cp $tempfile $sipfilename
  else if [ $compare = "yes" ]
  then
    diff --side-by-side $tempfile $sipfilename
  else
    cat $tempfile
  fi; fi
done

rm $tempfile

exit 0


#documentation
# remove comments
# remove macros
# remove using...
# remove empty lines
# remove friend class declarations
# remove friend test declarations
# remove initialization lists
# remove function definitions
# remove bell characters inserted by vim
# remove initial field values (e.g. int x = -1; )
# remove private and protected parts (except override functions)
# prepare for anchestors listed in multiple lines
# insert typeheadercode into classes
# insert typeheadercode into structs
# (undo) prepare for anchestors listed in multiple lines
# TYPEHEADERCODE -> real code
# string -> std::string (fail on std:: string)
# UpdaterMessage: comment out
# iofstream: comment out
# remove functions that use c++ streams - that are not sip compatible yet
# remove override keywords
# remove extra spaces before ; and extra ;-s

#TODO
#typeheadercode, protected parts: RandomChoosingCombinedModel, ToplistCombModel
#RSI: ToplistCombModel
#comment out lines containing complicated vector types (example: filters)
#vector: keep vector<int> but convert to std::vector<int>
#import extra sip code provided in header (example: filters, general_interfaces)
#comment out enums
#filename blacklist (list of regex, leave out matching files)
#python error (remove initlist line 12, NeedsExperimentEnvironment)
#/Abstract/ (example: GradientComputer)
#/NoDefaultCtors/ (example: OnlinePredictor)

#generate all during compilation <- first step: sync existing and generated files
# OK data_generators
# TODO filters
# TODO general_interfaces
# TODO gradient_computers
# TODO loggers
# TODO models
# TODO negative_sample_generators
# TODO objectives
# TODO offline_evaluators
# TODO offline_learners
# TODO online_experiment
# TODO online_learners
# TODO ranking
# TODO recommender_data
# TODO statistics
# TODO utils
