#include "../../main/online_learners/OfflineImplicitGradientLearner.h"
#include <vector>
#include <gtest/gtest.h>
#include "../../main/gradient_computers/GradientComputer.h"
#include "../../main/objectives/ObjectiveMSE.h"
#include "../../main/recommender_data/SimpleIterator.h"

namespace{
  class DummyModel: public Model{
    public:
      DummyModel(){
        writecounter = 0;
        readcounter = 0;
        clearcounter = 0;
      }
    void add(RecDat* recDat){}
    double prediction(RecDat* recDat){ return 0; }
    void write(ofstream& file){writecounter++;}
    void read(ifstream& file){readcounter++;}
    void clear(){clearcounter++;}
    int writecounter;
    int readcounter;
    int clearcounter;
  };

  class DummyUpdater: public ModelGradientUpdater{
    public:
      DummyUpdater(){
        counter = 0;
      }
      void update(RecDat* recDat, double gradient){
        counter++;
      }
      int counter;
  };

  class DummySampleGenerator : public NegativeSampleGenerator{
    public:
      DummySampleGenerator(){samples.push_back(1);samples.push_back(2);samples.push_back(3);}
      vector<int>* generate(RecDat * recDat){
        return &samples;
      }
  };

  class DummyGradientComputer : public GradientComputer{
    public:
      DummyGradientComputer(){
        has_next_var_ = false;
      }
      void set_up(vector<RecDat>* _train_data){
        train_data = _train_data;
        gradient_vector.clear();
        for(int i = 0;i<train_data->size(); i++){
          gradient_vector.push_back(make_pair(&(train_data->at(i)),0.5));
        }
        has_next_var_ = true;
      }
      vector<pair<RecDat*,double> >* get_next_gradient(){ has_next_var_ = false; return &gradient_vector;}
      bool has_next(){return has_next_var_;}
    private:
      bool has_next_var_;
  };

  class TestOfflineImplicitGradientLearner : public ::testing::Test  {
    public:
      TestOfflineImplicitGradientLearner(){}
      virtual ~TestOfflineImplicitGradientLearner(){}
      virtual void SetUp(){}
      virtual void TearDown(){
        for (vector<RecDat*>::iterator it = recDats.begin();it!=recDats.end();it++){
          delete *it;
        }
      }
      vector<RecDat*> recDats;
      RecDat* createRecDat(int user, int item, double time, double score){
        RecDat* recDat = new RecDat;
        recDat -> user = user;
        recDat -> item = item;
        recDat -> time = time;
        recDat -> score = score;
        recDats.push_back(recDat);
        return recDat;
      }
  };

  TEST_F(TestOfflineImplicitGradientLearner, donothing){
    OfflineImplicitGradientLearnerParameters params;
    params.number_of_iterations = 3;
    params.mode = "time-based";
    params.start_time = 10;
    params.period_length = 5;
    params.write_model = false;
    params.read_model = false;
    params.clear_model = false;
    params.learn = false;
    OfflineImplicitGradientLearner learner(&params);

    DummyModel model;
    learner.set_model(&model);

    DummyUpdater updater;
    learner.add_gradient_updater(&updater);

    vector<RecDat> recData;
    recData.push_back(*createRecDat(5,6,10,1.0));
    recData.push_back(*createRecDat(7,8,11,1.0));
    recData.push_back(*createRecDat(9,4,12,1.0));
    recData.push_back(*createRecDat(6,7,13,1.0));
    recData.push_back(*createRecDat(3,4,16,1.0));
    RecommenderData recommenderData;
    recommenderData.set_rec_data(recData);
    SimpleIterator iterator(&recommenderData);
    learner.set_recommender_data_iterator(&iterator);

    DummySampleGenerator generator;
    learner.set_negative_sample_generator(&generator);

    DummyGradientComputer gradientComputer;
    learner.set_gradient_computer(&gradientComputer);
    learner.init();
    learner.self_test();

    RecDat* recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    //test: eddig nem tanult semmit
    recDat = iterator.next();
    learner.update(recDat);
    //test: itt aztan hadd szoljon
    recDat = iterator.next();
    learner.update(recDat);
    EXPECT_EQ(0,updater.counter);
    EXPECT_EQ(0,model.writecounter);
    EXPECT_EQ(0,model.readcounter);
    EXPECT_EQ(0,model.clearcounter);

  }
  TEST_F(TestOfflineImplicitGradientLearner, numofupdates){
    OfflineImplicitGradientLearnerParameters params;
    params.number_of_iterations = 3;
    params.mode = "time-based";
    params.start_time = 10;
    params.period_length = 5;
    params.write_model = false;
    params.read_model = false;
    params.clear_model = false;
    params.learn = true;
    OfflineImplicitGradientLearner learner(&params);

    DummyModel model;
    learner.setModel(&model);

    DummyUpdater updater;
    learner.add_gradient_updater(&updater);

    vector<RecDat> recData;
    recData.push_back(*createRecDat(5,6,10,1.0));
    recData.push_back(*createRecDat(7,8,11,1.0));
    recData.push_back(*createRecDat(9,4,12,1.0));
    recData.push_back(*createRecDat(6,7,13,1.0));
    recData.push_back(*createRecDat(3,4,16,1.0));
    RecommenderData recommenderData;
    recommenderData.set_rec_data(recData);
    SimpleIterator iterator(&recommenderData);
    learner.set_recommender_data_iterator(&iterator);

    DummySampleGenerator generator;
    learner.set_negative_sample_generator(&generator);

    DummyGradientComputer gradientComputer;
    learner.set_gradient_computer(&gradientComputer);
    learner.init();
    learner.self_test();

    RecDat* recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    //test: eddig nem tanult semmit
    EXPECT_EQ(0,updater.counter);
    recDat = iterator.next();
    learner.update(recDat);
    EXPECT_EQ(16*3,updater.counter);
    //test: itt aztan hadd szoljon
    recDat = iterator.next();
    learner.update(recDat);

  }

  TEST_F(TestOfflineImplicitGradientLearner, numofwrites){
    OfflineImplicitGradientLearnerParameters params;
    params.number_of_iterations = 3;
    params.start_time = 10;
    params.mode = "time-based";
    params.period_length = 5;
    params.write_model = true;
    params.base_out_file_name = "offlineImplicitGradientUpdaterTestFile.txt";
    params.read_model = false;
    params.clear_model = false;
    params.learn = false;
    OfflineImplicitGradientLearner learner(&params);

    DummyModel model;
    learner.setModel(&model);

    DummyUpdater updater;
    learner.add_gradient_updater(&updater);
    learner.init();
    learner.self_test();

    vector<RecDat> recData;
    recData.push_back(*createRecDat(5,6,10,1.0));
    recData.push_back(*createRecDat(7,8,11,1.0));
    recData.push_back(*createRecDat(9,4,12,1.0));
    recData.push_back(*createRecDat(6,7,13,1.0));
    recData.push_back(*createRecDat(3,4,16,1.0));
    recData.push_back(*createRecDat(2,4,16,1.0));
    RecommenderData recommenderData;
    recommenderData.set_rec_data(recData);
    SimpleIterator iterator(&recommenderData);
    learner.set_recommender_data_iterator(&iterator);

    DummySampleGenerator generator;
    learner.set_negative_sample_generator(&generator);

    DummyGradientComputer gradientComputer;
    learner.set_gradient_computer(&gradientComputer);

    RecDat* recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    //test: eddig nem irt semmit
    EXPECT_EQ(0,model.writecounter);
    recDat = iterator.next();
    learner.update(recDat);
    //test: itt aztan hadd szoljon
    EXPECT_EQ(1,model.writecounter);
    recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    EXPECT_EQ(2,model.writecounter);

  }

  TEST_F(TestOfflineImplicitGradientLearner, numofreads){
    OfflineImplicitGradientLearnerParameters params;
    params.number_of_iterations = 3;
    params.start_time = 10;
    params.mode = "time-based";
    params.period_length = 5;
    params.write_model = false;
    params.read_model = true;
    params.base_in_file_name = "offlineImplicitGradientUpdaterTestFile.txt";
    params.clear_model = false;
    params.learn = false;
    OfflineImplicitGradientLearner learner(&params);

    DummyModel model;
    learner.setModel(&model);

    DummyUpdater updater;
    learner.add_gradient_updater(&updater);
    learner.init();
    learner.self_test();

    vector<RecDat> recData;
    recData.push_back(*createRecDat(5,6,10,1.0));
    recData.push_back(*createRecDat(7,8,11,1.0));
    recData.push_back(*createRecDat(9,4,12,1.0));
    recData.push_back(*createRecDat(6,7,13,1.0));
    recData.push_back(*createRecDat(3,4,16,1.0));
    recData.push_back(*createRecDat(2,4,16,1.0));
    RecommenderData recommenderData;
    recommenderData.set_rec_data(recData);
    SimpleIterator iterator(&recommenderData);
    learner.set_recommender_data_iterator(&iterator);

    DummySampleGenerator generator;
    learner.set_negative_sample_generator(&generator);

    DummyGradientComputer gradientComputer;
    learner.set_gradient_computer(&gradientComputer);

    EXPECT_EQ(0,model.readcounter); //do not reads as model_0 does not exist
    RecDat* recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    EXPECT_EQ(0,model.readcounter);
    recDat = iterator.next();
    learner.update(recDat);
    EXPECT_EQ(1,model.readcounter);
    recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    EXPECT_EQ(2,model.readcounter);
    remove("offlineImplicitGradientUpdaterTestFile.txt_1");
    remove("offlineImplicitGradientUpdaterTestFile.txt_2");
  }
  TEST_F(TestOfflineImplicitGradientLearner, doclear){
    OfflineImplicitGradientLearnerParameters params;
    params.number_of_iterations = 3;
    params.start_time = 10;
    params.mode = "time-based";
    params.period_length = 5;
    params.write_model = false;
    params.read_model = false;
    params.clear_model = true;
    params.learn = false;
    OfflineImplicitGradientLearner learner(&params);

    DummyModel model;
    learner.setModel(&model);
    learner.init();
    learner.self_test();

    DummyUpdater updater;
    learner.add_gradient_updater(&updater);

    vector<RecDat> recData;
    recData.push_back(*createRecDat(5,6,10,1.0));
    recData.push_back(*createRecDat(7,8,11,1.0));
    recData.push_back(*createRecDat(9,4,12,1.0));
    recData.push_back(*createRecDat(6,7,13,1.0));
    recData.push_back(*createRecDat(3,4,16,1.0));
    RecommenderData recommenderData;
    recommenderData.set_rec_data(recData);
    SimpleIterator iterator(&recommenderData);
    learner.set_recommender_data_iterator(&iterator);

    DummySampleGenerator generator;
    learner.set_negative_sample_generator(&generator);

    DummyGradientComputer gradientComputer;
    learner.set_gradient_computer(&gradientComputer);

    RecDat* recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    recDat = iterator.next();
    learner.update(recDat);
    //test: eddig nem tanult semmit
    recDat = iterator.next();
    learner.update(recDat);
    //test: itt aztan hadd szoljon
    recDat = iterator.next();
    learner.update(recDat);
    EXPECT_EQ(0,updater.counter);
    EXPECT_EQ(0,model.writecounter);
    EXPECT_EQ(0,model.readcounter);
    EXPECT_EQ(3,model.clearcounter);

  }
}
int main (int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
