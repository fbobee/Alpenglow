import alpenglow as prs
from alpenglow.offline.models import AsymmetricFactorModel
from alpenglow.offline.evaluation import NdcgScore
import alpenglow.Getter as rs
import pandas as pd
import numpy as np
import unittest
import pytest
import sys
import alpenglow.cpp
compiler = alpenglow.cpp.__compiler
stdlib = alpenglow.cpp.__stdlib


class TestAsymmetricFactorModel(unittest.TestCase):
    def test_rmse(self):
        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        model = AsymmetricFactorModel(
            negative_rate=9,
            number_of_iterations=20,
        )
        model.fit(data)

        def predict(model, user, item):
            rd = rs.RecDat()
            rd.user = user
            rd.item = item
            return model.prediction(rd)

        errors = [(1 - predict(model.model, u, i))**2 for (u, i) in data[['user', 'item']].values]
        rmse = np.sqrt(pd.Series(errors)).mean()
        assert rmse == pytest.approx(0.2693938783455279, abs=5*1e-2)

    def test_ranking(self):
        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        exp = AsymmetricFactorModel(
            negative_rate=9,
            number_of_iterations=20,
        )
        exp.fit(data)
        preds = exp.recommend(exclude_known=False, k=20)
        if(compiler == "gcc" and stdlib == "libstdc++"):
            assert preds['item'].tolist() ==  \
                 [98, 455, 94, 38, 427, 250, 255, 338, 298, 300, 299, 204, 450, 468, 97, 40, 156, 496, 120, 108, 256, 372, 94, 455, 338, 166, 30, 337, 225, 383, 462, 177, 168, 102, 282, 120, 98, 36, 375, 277, 98, 429, 300, 427, 94, 455, 462, 166, 371, 255, 38, 483, 496, 250, 372, 295, 247, 196, 442, 293, 442, 372, 215, 166, 30, 225, 462, 299, 429, 496, 94, 383, 444, 292, 337, 196, 293, 211, 300, 86, 300, 196, 204, 30, 165, 250, 442, 299, 86, 266, 450, 225, 455, 293, 81, 38, 62, 462, 400, 496, 165, 128, 86, 300, 383, 442, 94, 204, 196, 102, 462, 247, 166, 337, 293, 429, 375, 497, 372, 256, 300, 196, 462, 204, 165, 30, 86, 442, 383, 455, 452, 81, 128, 102, 400, 429, 247, 94, 497, 166, 299, 30, 225, 215, 337, 166, 196, 442, 36, 62, 40, 300, 120, 496, 94, 444, 434, 338, 372, 263, 299, 225, 30, 62, 94, 204, 98, 40, 166, 250, 337, 196, 300, 452, 36, 496, 247, 455, 81, 128, 256, 372, 338, 383, 462, 166, 168, 94, 30, 282, 120, 337, 479, 102, 225, 69, 455, 442, 36, 211, 30, 300, 455, 462, 299, 196, 372, 225, 166, 337, 442, 94, 215, 98, 177, 36, 338, 211, 491, 444, 300, 462, 442, 30, 196, 215, 166, 299, 429, 225, 94, 372, 383, 86, 400, 496, 81, 165, 204, 263, 30, 299, 225, 442, 62, 196, 337, 166, 94, 300, 40, 215, 250, 496, 434, 372, 263, 204, 36, 292, 444, 168, 338, 277, 4, 97, 156, 372, 255, 293, 165, 263, 247, 442, 120, 458, 54, 86, 40, 161, 300, 196, 462, 204, 455, 30, 165, 452, 497, 400, 81, 429, 86, 250, 442, 105, 188, 395, 38, 491, 30, 299, 225, 337, 300, 166, 462, 196, 455, 442, 372, 215, 94, 36, 338, 263, 452, 444, 62, 120, 94, 256, 204, 247, 98, 455, 128, 102, 166, 383, 282, 462, 300, 86, 375, 165, 497, 177, 30, 225, 204, 300, 98, 196, 250, 455, 94, 38, 450, 266, 30, 165, 497, 62, 299, 247, 427, 108, 452, 468, 98, 300, 30, 204, 299, 94, 225, 196, 455, 250, 62, 337, 166, 452, 38, 40, 450, 247, 497, 298, 98, 94, 30, 225, 166, 299, 455, 337, 300, 338, 250, 38, 196, 372, 36, 120, 40, 255, 62, 204, 94, 250, 427, 98, 300, 196, 62, 204, 266, 450, 38, 255, 108, 429, 165, 225, 293, 166, 299, 496, 300, 30, 225, 299, 94, 196, 166, 442, 204, 250, 337, 62, 165, 462, 496, 215, 40, 128, 86, 98, 30, 225, 300, 299, 166, 196, 204, 442, 462, 94, 215, 165, 383, 452, 81, 86, 128, 62, 263, 337, 98, 338, 94, 166, 120, 97, 414, 427, 256, 40, 255, 282, 36, 156, 372, 168, 325, 225, 429, 444, 225, 94, 30, 128, 62, 166, 383, 337, 165, 442, 299, 204, 86, 256, 40, 102, 196, 372, 247, 263, 166, 462, 256, 94, 372, 442, 429, 247, 225, 30, 215, 383, 455, 102, 36, 483, 427, 211, 371, 177, 300, 462, 383, 30, 165, 204, 86, 196, 102, 128, 452, 455, 442, 372, 81, 166, 247, 263, 497, 256, 30, 442, 372, 225, 166, 94, 337, 299, 455, 338, 462, 300, 196, 256, 120, 444, 215, 4, 383, 36, 299, 30, 225, 215, 337, 166, 196, 442, 36, 62, 40, 300, 120, 496, 94, 444, 434, 338, 372, 263, 300, 196, 462, 204, 455, 30, 165, 452, 497, 400, 81, 429, 86, 250, 442, 105, 188, 395, 38, 491, 300, 442, 196, 30, 215, 299, 462, 496, 429, 166, 225, 94, 372, 250, 292, 400, 25, 255, 491, 293, 204, 94, 98, 247, 256, 128, 455, 282, 102, 375, 165, 166, 86, 300, 497, 177, 383, 468, 427, 38, 62, 299, 225, 40, 94, 30, 337, 97, 250, 166, 204, 120, 434, 98, 496, 196, 36, 292, 128, 498, 98, 94, 166, 427, 250, 225, 299, 255, 429, 30, 38, 496, 40, 300, 455, 414, 247, 196, 483, 338, 300, 204, 196, 455, 30, 250, 94, 98, 38, 165, 337, 225, 450, 266, 299, 177, 62, 102, 452, 86, 30, 166, 442, 225, 372, 94, 299, 338, 337, 462, 215, 120, 256, 36, 444, 455, 383, 496, 211, 300, 30, 94, 166, 372, 455, 338, 225, 98, 337, 462, 299, 256, 442, 120, 36, 300, 444, 177, 211, 215, 427, 204, 94, 98, 38, 300, 455, 266, 165, 128, 450, 375, 86, 247, 250, 108, 196, 468, 371, 177, 442, 166, 429, 300, 462, 299, 94, 30, 215, 496, 196, 225, 372, 427, 255, 250, 98, 483, 455, 371, 300, 98, 455, 204, 250, 196, 94, 38, 30, 427, 497, 255, 299, 429, 450, 298, 462, 496, 468, 266, 30, 442, 225, 166, 372, 299, 94, 300, 337, 462, 338, 455, 215, 196, 383, 120, 36, 444, 496, 256, 62, 225, 299, 40, 30, 94, 337, 204, 166, 250, 196, 97, 128, 120, 434, 165, 36, 98, 442, 498, 30, 299, 225, 337, 300, 166, 462, 196, 455, 442, 372, 215, 94, 36, 338, 263, 452, 444, 62, 120, 299, 30, 442, 225, 166, 496, 215, 94, 300, 372, 196, 337, 255, 444, 250, 40, 338, 292, 36, 98, 225, 299, 166, 338, 30, 120, 40, 94, 442, 36, 215, 372, 444, 337, 97, 496, 62, 414, 434, 255, 166, 94, 225, 462, 30, 372, 442, 256, 215, 299, 429, 36, 338, 98, 247, 414, 496, 337, 383, 483, 455, 300, 94, 196, 30, 166, 38, 204, 86, 177, 165, 128, 427, 337, 102, 372, 225, 442, 462, 256, 94, 30, 166, 98, 300, 225, 299, 462, 455, 204, 196, 247, 250, 215, 429, 337, 36, 256, 496, 372, 462, 372, 215, 383, 30, 166, 256, 300, 455, 442, 102, 400, 211, 247, 429, 452, 81, 36, 348, 225, 30, 462, 442, 215, 166, 300, 299, 225, 372, 196, 94, 383, 337, 36, 496, 455, 429, 81, 400, 263, 94, 166, 442, 429, 427, 372, 462, 225, 371, 256, 483, 86, 247, 414, 496, 30, 215, 128, 293, 250, 338, 299, 120, 30, 225, 40, 444, 36, 166, 337, 372, 98, 97, 215, 94, 442, 496, 62, 434, 255, 30, 225, 166, 94, 299, 337, 372, 442, 462, 215, 36, 338, 98, 256, 40, 300, 196, 455, 62, 120, 256, 455, 94, 383, 102, 166, 462, 128, 282, 30, 247, 204, 177, 372, 98, 337, 375, 225, 300, 168, 462, 300, 30, 383, 166, 442, 225, 196, 94, 215, 204, 165, 86, 102, 247, 452, 128, 299, 81, 372, 166, 94, 338, 225, 299, 372, 30, 120, 442, 98, 36, 215, 40, 256, 444, 496, 337, 414, 462, 97, 300, 196, 204, 30, 165, 250, 442, 299, 86, 266, 450, 225, 455, 293, 81, 38, 62, 462, 400, 496, 30, 299, 225, 337, 300, 166, 462, 196, 455, 442, 372, 215, 94, 36, 338, 263, 452, 444, 62, 120, 299, 225, 94, 166, 40, 30, 98, 62, 496, 250, 442, 255, 337, 215, 36, 97, 120, 292, 196, 338, 98, 455, 94, 38, 427, 250, 255, 338, 298, 300, 299, 204, 450, 468, 97, 40, 156, 496, 120, 108, 166, 94, 299, 225, 30, 98, 496, 442, 250, 40, 215, 429, 255, 36, 196, 414, 372, 427, 462, 292, 98, 94, 166, 225, 338, 455, 299, 30, 427, 256, 250, 429, 255, 247, 38, 40, 36, 372, 496, 337, 166, 94, 225, 462, 30, 372, 442, 256, 215, 299, 429, 36, 338, 98, 247, 414, 496, 337, 383, 483, 300, 30, 196, 204, 455, 299, 225, 94, 462, 166, 337, 98, 250, 452, 165, 102, 442, 81, 62, 215, 299, 30, 225, 94, 442, 98, 166, 250, 337, 255, 196, 496, 62, 292, 338, 293, 120, 300, 40, 444]

        assert NdcgScore(data, preds, top_k=20) == pytest.approx(0.9211200538533627, abs=1e-2)

        preds2 = exp.recommend(users = [1, 2], exclude_known=False)
        assert preds2['user'].unique().tolist() == [1,2]

        preds = exp.recommend(exclude_known=True)
        joined_preds = preds.join(
            data.set_index(['user', 'item']),
            on=['user','item'], how='inner'
        )
        assert len(joined_preds) == 0
