import alpenglow as prs
from alpenglow.offline.models import FactorModel
from alpenglow.offline.evaluation import NdcgScore
import alpenglow.Getter as rs
import pandas as pd
import numpy as np
import unittest
import pytest
import sys
import alpenglow.cpp
compiler = alpenglow.cpp.__compiler
stdlib = alpenglow.cpp.__stdlib

class TestFactorModel(unittest.TestCase):
    def test_rmse(self):
        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        model = FactorModel(
            negative_rate=9,
            number_of_iterations=20,
        )
        model.fit(data)

        def predict(model, user, item):
            rd = rs.RecDat()
            rd.user = user
            rd.item = item
            return model.prediction(rd)

        errors = [(1 - predict(model.model, u, i))**2 for (u, i) in data[['user', 'item']].values]
        rmse = np.sqrt(pd.Series(errors)).mean()
        assert rmse == pytest.approx(0.2957610395782218, abs=1e-2)

    def test_ranking(self):
        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        exp = FactorModel(
            negative_rate=9,
            number_of_iterations=20,
        )
        exp.fit(data)
        preds = exp.recommend(exclude_known=False, k=20)
        if(compiler == "gcc" and stdlib == "libstdc++"):
            print(preds['item'].tolist())
            assert preds['item'].tolist() ==  \
                 [94, 166, 30, 225, 98, 299, 442, 300, 372, 337, 338, 455, 196, 462, 250, 496, 429, 256, 62, 36, 338, 256, 166, 372, 94, 337, 98, 455, 30, 282, 383, 120, 225, 277, 128, 168, 177, 479, 102, 54, 94, 98, 429, 300, 299, 166, 455, 30, 225, 427, 372, 462, 371, 496, 247, 255, 250, 483, 215, 338, 30, 94, 166, 225, 299, 442, 300, 196, 337, 372, 98, 462, 250, 215, 496, 455, 62, 338, 36, 40, 30, 94, 166, 225, 300, 442, 299, 196, 337, 462, 98, 372, 250, 455, 204, 62, 215, 38, 496, 256, 300, 94, 204, 30, 86, 165, 166, 128, 196, 247, 225, 337, 462, 383, 102, 442, 62, 256, 455, 299, 30, 94, 300, 166, 225, 462, 196, 442, 299, 204, 372, 455, 337, 86, 102, 250, 247, 383, 215, 165, 30, 94, 166, 225, 299, 300, 442, 462, 196, 372, 98, 337, 215, 250, 455, 496, 429, 36, 338, 204, 94, 30, 166, 225, 299, 300, 442, 196, 337, 98, 250, 62, 496, 40, 204, 372, 462, 215, 429, 36, 462, 372, 94, 256, 166, 30, 338, 383, 455, 225, 98, 102, 282, 36, 247, 337, 177, 442, 69, 299, 30, 94, 225, 166, 300, 462, 299, 372, 442, 455, 196, 337, 98, 215, 338, 36, 250, 256, 429, 496, 30, 225, 166, 300, 94, 299, 442, 462, 196, 215, 372, 337, 204, 250, 455, 496, 36, 86, 383, 165, 30, 225, 94, 166, 442, 300, 299, 196, 337, 372, 462, 250, 62, 98, 215, 455, 496, 204, 40, 36, 338, 444, 168, 383, 165, 263, 255, 97, 4, 277, 247, 436, 372, 122, 211, 296, 295, 483, 6, 330, 30, 94, 300, 166, 225, 299, 442, 462, 196, 372, 337, 455, 250, 204, 98, 215, 429, 247, 496, 86, 30, 94, 166, 225, 300, 299, 442, 462, 372, 196, 337, 455, 98, 250, 215, 204, 36, 338, 256, 496, 94, 166, 256, 247, 128, 30, 98, 462, 383, 225, 102, 455, 204, 282, 300, 372, 86, 375, 337, 165, 94, 30, 166, 225, 300, 299, 442, 196, 98, 337, 250, 204, 462, 372, 455, 62, 429, 427, 247, 38, 94, 30, 300, 225, 166, 299, 196, 442, 337, 250, 98, 462, 372, 455, 204, 429, 496, 247, 38, 215, 94, 30, 166, 225, 300, 299, 442, 98, 196, 372, 455, 337, 462, 250, 429, 338, 38, 496, 215, 204, 94, 98, 62, 427, 250, 300, 204, 450, 266, 108, 128, 196, 40, 165, 293, 299, 38, 371, 166, 255, 94, 30, 166, 299, 225, 300, 442, 196, 462, 250, 98, 215, 372, 337, 496, 429, 204, 455, 40, 36, 300, 30, 299, 225, 462, 166, 204, 94, 442, 215, 196, 383, 165, 452, 337, 86, 62, 81, 40, 496, 98, 94, 338, 166, 414, 120, 97, 255, 256, 282, 427, 429, 40, 299, 293, 325, 444, 371, 225, 156, 94, 166, 30, 225, 300, 462, 299, 337, 247, 442, 98, 196, 372, 204, 128, 383, 256, 455, 62, 102, 94, 462, 166, 30, 256, 455, 372, 225, 247, 98, 429, 300, 299, 383, 215, 282, 102, 36, 442, 338, 30, 94, 166, 225, 462, 300, 299, 372, 442, 196, 455, 337, 383, 256, 98, 247, 204, 215, 102, 36, 30, 94, 166, 225, 442, 337, 300, 372, 196, 299, 455, 98, 462, 338, 62, 256, 250, 38, 177, 36, 30, 94, 166, 225, 299, 300, 442, 462, 196, 372, 98, 337, 215, 250, 496, 455, 429, 36, 338, 40, 94, 30, 166, 225, 300, 299, 442, 462, 196, 372, 337, 98, 455, 250, 204, 215, 429, 496, 247, 86, 30, 94, 166, 225, 299, 300, 442, 196, 462, 372, 250, 98, 337, 215, 496, 429, 455, 204, 36, 62, 94, 166, 30, 225, 300, 98, 462, 455, 256, 204, 196, 299, 442, 372, 247, 337, 128, 86, 250, 102, 94, 30, 166, 225, 299, 442, 300, 98, 337, 196, 62, 40, 496, 250, 372, 215, 338, 36, 462, 255, 94, 166, 30, 225, 299, 98, 300, 442, 250, 196, 496, 429, 337, 427, 372, 255, 40, 455, 62, 38, 30, 94, 300, 166, 225, 196, 204, 442, 455, 337, 462, 299, 250, 86, 372, 165, 38, 98, 427, 102, 30, 94, 225, 166, 299, 442, 300, 372, 98, 462, 337, 215, 196, 338, 455, 36, 496, 250, 444, 429, 30, 94, 166, 225, 372, 455, 442, 98, 337, 338, 462, 299, 300, 196, 256, 36, 177, 120, 444, 215, 204, 427, 94, 375, 128, 86, 98, 247, 165, 455, 38, 468, 300, 256, 450, 266, 371, 108, 156, 102, 299, 94, 30, 300, 166, 429, 225, 215, 98, 462, 442, 372, 496, 255, 455, 250, 427, 36, 483, 371, 94, 30, 166, 225, 299, 300, 98, 442, 372, 462, 196, 337, 455, 250, 429, 338, 496, 247, 215, 256, 30, 94, 225, 166, 442, 299, 300, 372, 337, 462, 196, 98, 455, 338, 215, 250, 36, 496, 62, 256, 94, 30, 166, 225, 299, 442, 300, 98, 337, 196, 372, 62, 250, 462, 496, 338, 455, 40, 204, 36, 30, 94, 166, 225, 300, 299, 442, 196, 462, 372, 337, 98, 455, 250, 215, 496, 338, 204, 36, 429, 299, 30, 225, 442, 166, 94, 215, 496, 98, 300, 372, 338, 40, 337, 444, 36, 120, 196, 250, 255, 299, 166, 225, 338, 442, 120, 30, 94, 98, 40, 215, 496, 444, 36, 372, 62, 337, 255, 97, 292, 94, 30, 166, 225, 300, 299, 442, 98, 196, 372, 462, 337, 455, 250, 215, 338, 256, 204, 496, 36, 455, 300, 30, 196, 204, 94, 225, 166, 337, 38, 177, 165, 86, 442, 266, 450, 250, 102, 108, 427, 94, 30, 300, 166, 225, 299, 462, 372, 442, 98, 429, 215, 455, 250, 196, 204, 247, 496, 337, 36, 30, 94, 166, 225, 462, 300, 299, 372, 442, 455, 196, 215, 337, 98, 256, 36, 383, 338, 247, 102, 30, 166, 225, 94, 299, 442, 462, 300, 372, 215, 196, 337, 455, 36, 98, 250, 496, 338, 256, 429, 94, 166, 30, 225, 98, 300, 299, 442, 429, 196, 462, 455, 372, 250, 247, 427, 337, 204, 256, 496, 94, 30, 166, 225, 299, 442, 98, 372, 300, 462, 338, 337, 215, 196, 36, 496, 455, 250, 120, 444, 30, 94, 166, 225, 299, 300, 442, 372, 98, 196, 462, 337, 455, 250, 215, 338, 496, 36, 256, 429, 256, 455, 102, 383, 94, 247, 128, 462, 282, 372, 177, 375, 166, 30, 98, 204, 86, 69, 225, 337, 462, 30, 300, 166, 94, 225, 204, 442, 196, 299, 383, 215, 86, 102, 372, 256, 165, 247, 455, 81, 94, 166, 98, 299, 225, 30, 338, 372, 442, 215, 120, 36, 496, 444, 40, 462, 255, 337, 429, 300, 30, 94, 166, 225, 300, 442, 299, 196, 337, 462, 372, 98, 250, 455, 204, 62, 215, 496, 38, 256, 30, 94, 166, 225, 300, 442, 299, 372, 462, 196, 337, 455, 98, 250, 215, 338, 256, 204, 36, 429, 94, 166, 299, 30, 225, 442, 98, 300, 496, 250, 196, 337, 372, 215, 40, 429, 462, 255, 338, 62, 94, 166, 98, 30, 225, 299, 442, 300, 372, 338, 337, 455, 196, 462, 250, 429, 496, 62, 256, 36, 94, 166, 30, 225, 299, 98, 442, 300, 372, 196, 462, 337, 496, 250, 429, 215, 338, 40, 62, 36, 94, 166, 30, 225, 98, 299, 300, 442, 372, 337, 455, 462, 196, 338, 250, 429, 496, 256, 36, 215, 94, 30, 166, 225, 299, 300, 442, 98, 372, 462, 196, 337, 455, 250, 338, 215, 256, 36, 429, 496, 30, 94, 300, 166, 225, 442, 196, 299, 462, 455, 337, 372, 204, 250, 98, 215, 86, 256, 38, 102, 30, 225, 442, 299, 94, 166, 98, 337, 338, 120, 496, 444, 62, 250, 40, 292, 255, 196, 372, 300]

        assert NdcgScore(data, preds, top_k=20) == pytest.approx(0.7253437654975486, abs=5*1e-3)

        preds2 = exp.recommend(users = [1, 2], exclude_known=False)
        assert preds2['user'].unique().tolist() == [1,2]

        preds = exp.recommend(exclude_known=True)
        joined_preds = preds.join(
            data.set_index(['user', 'item']),
            on=['user','item'], how='inner'
        )
        assert len(joined_preds) == 0
