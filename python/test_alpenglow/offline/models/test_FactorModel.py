import alpenglow as prs
from alpenglow.offline.models import FactorModel
from alpenglow.offline.evaluation import NdcgScore
import alpenglow.Getter as rs
import pandas as pd
import numpy as np
import unittest
import pytest
import sys
import alpenglow.cpp
compiler = alpenglow.cpp.__compiler
stdlib = alpenglow.cpp.__stdlib

class TestFactorModel(unittest.TestCase):
    def test_rmse(self):
        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        model = FactorModel(
            factor_seed=254938879,
            negative_rate=9,
            number_of_iterations=20,
        )
        model.fit(data)

        def predict(model, user, item):
            rd = rs.RecDat()
            rd.user = user
            rd.item = item
            return model.prediction(rd)

        errors = [(1 - predict(model.model, u, i))**2 for (u, i) in data[['user', 'item']].values]
        rmse = np.sqrt(pd.Series(errors)).mean()
        assert rmse == pytest.approx(0.2957610395782218, abs=1e-2)

    def test_ranking(self):
        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        exp = FactorModel(
            factor_seed=254938879,
            negative_rate=9,
            number_of_iterations=20,
        )
        exp.fit(data)
        preds = exp.recommend(exclude_known=False, k=20)
        if(compiler == "gcc" and stdlib == "libstdc++"):
            print(preds['item'].tolist())
            assert preds['item'].tolist() ==  \
                 [94, 166, 30, 225, 98, 299, 300, 442, 372, 337, 455, 462, 196, 338, 256, 250, 36, 429, 496, 215, 256, 372, 338, 455, 94, 166, 337, 98, 177, 30, 462, 225, 282, 168, 383, 102, 120, 277, 375, 479, 94, 98, 166, 429, 300, 299, 30, 442, 225, 462, 371, 427, 372, 455, 255, 496, 414, 215, 196, 250, 94, 30, 166, 225, 299, 442, 300, 98, 196, 372, 337, 462, 250, 455, 215, 496, 338, 36, 429, 62, 94, 30, 166, 300, 225, 196, 442, 299, 337, 98, 372, 250, 462, 455, 62, 496, 204, 215, 38, 293, 300, 94, 86, 204, 165, 166, 30, 128, 247, 225, 462, 196, 383, 442, 429, 256, 102, 427, 497, 337, 94, 30, 300, 166, 225, 196, 462, 442, 204, 299, 337, 372, 455, 247, 86, 165, 98, 250, 128, 383, 94, 30, 166, 225, 299, 300, 442, 98, 196, 337, 462, 372, 250, 204, 455, 496, 215, 429, 36, 40, 30, 94, 225, 166, 299, 300, 337, 442, 98, 196, 250, 204, 40, 496, 62, 372, 462, 215, 36, 455, 256, 462, 94, 166, 372, 30, 383, 225, 455, 338, 102, 98, 337, 282, 247, 36, 177, 442, 168, 128, 94, 30, 166, 225, 299, 300, 442, 98, 372, 462, 337, 196, 455, 338, 215, 250, 36, 496, 256, 429, 94, 30, 300, 166, 225, 442, 196, 299, 462, 372, 337, 250, 215, 204, 98, 455, 247, 496, 429, 383, 30, 94, 225, 166, 300, 299, 442, 196, 337, 372, 250, 98, 62, 462, 204, 496, 455, 40, 215, 36, 338, 444, 168, 247, 383, 97, 293, 165, 255, 98, 277, 128, 122, 330, 4, 372, 156, 120, 483, 458, 94, 30, 166, 300, 225, 299, 442, 196, 98, 462, 337, 250, 372, 204, 429, 455, 247, 496, 215, 256, 94, 30, 166, 225, 300, 299, 442, 98, 337, 462, 372, 196, 455, 256, 250, 204, 338, 215, 36, 247, 94, 166, 256, 30, 462, 225, 247, 204, 300, 383, 455, 98, 128, 102, 86, 372, 337, 165, 282, 375, 94, 30, 166, 225, 300, 299, 442, 196, 98, 337, 250, 204, 462, 372, 455, 62, 247, 429, 496, 256, 94, 30, 166, 225, 299, 300, 98, 337, 442, 204, 196, 250, 462, 372, 455, 256, 40, 496, 247, 429, 94, 30, 166, 225, 299, 300, 98, 442, 337, 462, 372, 455, 196, 204, 256, 250, 429, 338, 36, 247, 300, 94, 204, 250, 427, 299, 450, 266, 98, 62, 165, 196, 108, 429, 166, 86, 38, 30, 371, 225, 94, 30, 300, 166, 225, 299, 442, 196, 462, 98, 204, 250, 337, 372, 429, 215, 496, 455, 247, 86, 30, 300, 225, 299, 166, 204, 94, 462, 196, 442, 215, 452, 337, 165, 86, 383, 247, 81, 250, 40, 98, 94, 166, 338, 256, 30, 299, 225, 455, 429, 414, 372, 36, 427, 120, 255, 282, 462, 97, 444, 94, 30, 166, 225, 300, 442, 462, 299, 337, 204, 196, 372, 256, 98, 247, 128, 383, 455, 86, 165, 94, 462, 166, 30, 256, 225, 372, 98, 383, 299, 429, 455, 300, 247, 442, 338, 36, 215, 414, 282, 94, 30, 166, 225, 300, 462, 299, 442, 372, 98, 196, 256, 337, 455, 247, 204, 383, 429, 128, 102, 30, 94, 225, 166, 442, 337, 299, 372, 300, 98, 196, 455, 462, 338, 62, 250, 256, 36, 215, 38, 94, 30, 166, 225, 299, 300, 442, 98, 337, 196, 372, 250, 462, 496, 215, 204, 455, 40, 429, 36, 94, 30, 166, 300, 225, 299, 442, 196, 98, 462, 372, 337, 250, 204, 455, 429, 247, 496, 215, 256, 94, 30, 166, 300, 299, 225, 442, 196, 98, 250, 372, 462, 496, 337, 429, 215, 455, 204, 62, 255, 94, 166, 30, 225, 300, 462, 98, 256, 204, 337, 455, 299, 247, 372, 442, 196, 128, 383, 102, 86, 30, 94, 225, 299, 166, 442, 300, 337, 98, 196, 250, 372, 496, 62, 40, 215, 36, 462, 338, 204, 94, 30, 166, 299, 225, 300, 98, 442, 196, 250, 496, 337, 372, 429, 255, 455, 215, 462, 427, 40, 94, 30, 300, 166, 225, 196, 337, 442, 204, 299, 98, 250, 455, 462, 165, 372, 62, 86, 128, 247, 94, 30, 166, 225, 299, 442, 300, 372, 98, 462, 337, 455, 196, 338, 215, 36, 256, 250, 496, 429, 94, 30, 166, 225, 372, 98, 299, 455, 462, 338, 442, 256, 337, 300, 36, 196, 120, 215, 177, 383, 94, 128, 204, 375, 300, 165, 427, 98, 86, 38, 196, 247, 266, 166, 450, 156, 108, 455, 468, 256, 299, 94, 442, 300, 429, 166, 98, 215, 30, 225, 255, 462, 496, 372, 196, 250, 292, 211, 491, 444, 94, 30, 166, 225, 300, 299, 98, 442, 196, 372, 462, 455, 337, 250, 429, 496, 256, 338, 215, 204, 94, 30, 166, 225, 300, 299, 442, 98, 372, 337, 462, 196, 455, 256, 338, 250, 36, 204, 215, 62, 94, 30, 166, 225, 299, 300, 442, 98, 337, 196, 372, 250, 462, 455, 62, 338, 496, 204, 256, 36, 94, 30, 166, 225, 300, 299, 442, 98, 337, 372, 462, 196, 455, 250, 204, 256, 215, 338, 36, 496, 442, 299, 30, 225, 166, 94, 215, 196, 372, 496, 300, 444, 250, 98, 255, 292, 36, 181, 491, 25, 299, 225, 30, 166, 94, 98, 338, 36, 215, 40, 442, 496, 372, 120, 444, 337, 97, 250, 62, 255, 94, 30, 166, 225, 300, 299, 98, 442, 372, 462, 337, 196, 455, 256, 250, 338, 204, 36, 215, 247, 300, 94, 196, 30, 204, 337, 166, 225, 165, 455, 86, 442, 128, 38, 177, 102, 256, 375, 250, 372, 94, 30, 166, 225, 299, 300, 462, 98, 204, 337, 442, 215, 256, 372, 247, 36, 250, 496, 40, 429, 94, 30, 166, 225, 462, 300, 372, 442, 299, 98, 455, 196, 337, 256, 383, 338, 215, 247, 36, 102, 94, 30, 166, 225, 299, 300, 442, 462, 372, 196, 98, 337, 215, 455, 250, 36, 496, 338, 256, 429, 94, 166, 30, 225, 300, 98, 442, 299, 462, 372, 196, 429, 455, 337, 256, 247, 250, 427, 338, 204, 94, 30, 166, 225, 299, 98, 442, 300, 372, 337, 462, 338, 455, 196, 36, 215, 250, 496, 256, 429, 94, 30, 166, 225, 299, 300, 442, 98, 462, 372, 337, 196, 455, 256, 250, 338, 215, 36, 204, 247, 256, 94, 383, 102, 462, 166, 30, 455, 128, 204, 247, 282, 225, 375, 337, 372, 86, 168, 165, 177, 462, 94, 300, 30, 166, 225, 204, 383, 247, 86, 196, 102, 165, 372, 442, 256, 299, 452, 455, 128, 299, 94, 166, 98, 30, 225, 338, 36, 372, 120, 442, 256, 215, 40, 337, 496, 444, 455, 97, 462, 94, 30, 166, 225, 300, 442, 196, 299, 337, 372, 98, 250, 462, 455, 62, 496, 204, 215, 38, 429, 94, 30, 166, 225, 300, 299, 442, 98, 337, 462, 372, 196, 455, 256, 204, 250, 338, 247, 36, 215, 94, 30, 299, 166, 225, 300, 442, 98, 196, 250, 337, 496, 372, 429, 462, 215, 40, 204, 62, 36, 94, 166, 30, 225, 98, 299, 300, 442, 372, 455, 462, 337, 196, 338, 256, 250, 429, 36, 496, 215, 94, 30, 166, 225, 299, 300, 98, 442, 196, 337, 250, 462, 372, 496, 429, 204, 215, 455, 247, 40, 94, 166, 30, 225, 98, 299, 300, 442, 372, 462, 455, 337, 256, 196, 338, 429, 250, 36, 247, 215, 94, 30, 166, 225, 299, 300, 98, 442, 462, 372, 337, 196, 455, 256, 338, 250, 204, 36, 247, 215, 94, 30, 166, 225, 300, 299, 442, 337, 196, 204, 98, 462, 372, 455, 250, 256, 247, 62, 86, 165, 442, 299, 30, 225, 196, 444, 98, 250, 166, 337, 94, 62, 496, 120, 40, 292, 293, 372, 156, 338]

        assert NdcgScore(data, preds, top_k=20) == pytest.approx(0.6862576799209609, abs=5*1e-3)

        preds2 = exp.recommend(users = [1, 2], exclude_known=False)
        assert preds2['user'].unique().tolist() == [1,2]

        preds = exp.recommend(exclude_known=True)
        joined_preds = preds.join(
            data.set_index(['user', 'item']),
            on=['user','item'], how='inner'
        )
        assert len(joined_preds) == 0
