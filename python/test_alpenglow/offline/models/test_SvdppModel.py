import alpenglow as prs
from alpenglow.offline.models import SvdppModel
from alpenglow.offline.evaluation import NdcgScore
import alpenglow.Getter as rs
import pandas as pd
import numpy as np
import unittest
import pytest
import sys
import alpenglow.cpp
compiler = alpenglow.cpp.__compiler
stdlib = alpenglow.cpp.__stdlib

class TestSvdppModel(unittest.TestCase):
    def test_rmse(self):
        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        model = SvdppModel(
            negative_rate=9,
            number_of_iterations=20,
        )
        model.fit(data)

        def predict(model, user, item):
            rd = rs.RecDat()
            rd.user = user
            rd.item = item
            return model.prediction(rd)

        errors = [(1 - predict(model.model, u, i))**2 for (u, i) in data[['user', 'item']].values]
        rmse = np.sqrt(pd.Series(errors)).mean()
        assert rmse == pytest.approx(0.39698378706302073, abs=5*1e-3)

    def test_ranking(self):
        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        exp = SvdppModel(
            negative_rate=9,
            number_of_iterations=20,
        )
        exp.fit(data)
        preds = exp.recommend(exclude_known=False, k=20)
        if(compiler == "gcc" and stdlib == "libstdc++"):
            assert preds['item'].tolist() ==  \
                [94, 166, 30, 225, 300, 98, 299, 442, 196, 337, 455, 250, 372, 204, 429, 462, 496, 247, 62, 338, 94, 30, 166, 225, 372, 455, 462, 256, 337, 300, 383, 98, 102, 196, 247, 128, 442, 338, 177, 204, 94, 30, 166, 225, 299, 300, 98, 442, 196, 337, 372, 250, 429, 496, 462, 455, 215, 338, 40, 204, 30, 94, 166, 225, 299, 442, 300, 372, 98, 337, 215, 462, 338, 496, 250, 36, 196, 40, 429, 444, 94, 300, 30, 166, 225, 196, 98, 442, 204, 299, 337, 455, 250, 247, 462, 128, 38, 372, 429, 62, 94, 300, 30, 166, 204, 196, 225, 128, 455, 165, 98, 86, 247, 337, 256, 462, 383, 102, 442, 250, 94, 300, 30, 166, 225, 196, 204, 98, 455, 337, 442, 462, 128, 247, 299, 86, 256, 165, 250, 372, 94, 30, 166, 225, 299, 442, 300, 98, 372, 337, 462, 215, 338, 196, 496, 250, 36, 429, 40, 455, 94, 30, 166, 225, 300, 299, 98, 442, 196, 337, 372, 250, 455, 462, 204, 429, 496, 215, 62, 338, 30, 94, 166, 225, 372, 462, 256, 338, 337, 442, 383, 299, 455, 98, 36, 300, 215, 102, 247, 128, 94, 30, 166, 225, 300, 299, 442, 98, 337, 372, 196, 462, 455, 250, 256, 204, 429, 338, 215, 36, 94, 30, 166, 225, 300, 299, 442, 98, 196, 337, 462, 372, 455, 250, 204, 429, 256, 247, 215, 62, 94, 30, 166, 225, 299, 442, 300, 98, 337, 372, 196, 250, 462, 455, 496, 215, 429, 338, 36, 40, 383, 128, 282, 338, 256, 98, 168, 156, 247, 94, 86, 375, 165, 372, 277, 97, 4, 177, 293, 102, 94, 300, 30, 166, 225, 196, 98, 204, 455, 299, 337, 442, 247, 250, 462, 128, 86, 165, 429, 256, 94, 30, 166, 225, 299, 442, 300, 98, 372, 337, 462, 196, 455, 338, 250, 215, 36, 429, 256, 496, 94, 300, 166, 30, 204, 225, 455, 196, 128, 98, 256, 462, 247, 383, 337, 102, 86, 165, 372, 177, 94, 300, 30, 166, 225, 196, 98, 204, 455, 337, 299, 442, 250, 247, 128, 462, 86, 165, 38, 256, 94, 30, 166, 300, 225, 98, 299, 196, 442, 337, 455, 204, 250, 372, 462, 429, 247, 62, 256, 128, 94, 30, 166, 225, 299, 300, 442, 98, 337, 196, 372, 455, 462, 250, 429, 338, 215, 496, 36, 204, 300, 94, 30, 166, 196, 225, 98, 299, 250, 442, 204, 337, 429, 62, 496, 38, 455, 427, 165, 293, 94, 30, 166, 225, 300, 299, 442, 98, 337, 196, 372, 462, 250, 455, 429, 204, 496, 215, 256, 338, 94, 30, 166, 225, 300, 299, 442, 462, 98, 337, 196, 372, 204, 455, 256, 247, 429, 250, 128, 383, 299, 94, 30, 166, 225, 442, 338, 98, 372, 496, 215, 337, 40, 36, 120, 444, 300, 255, 462, 429, 94, 30, 166, 225, 300, 299, 442, 98, 196, 337, 462, 372, 455, 204, 256, 247, 128, 250, 383, 429, 94, 30, 166, 225, 299, 372, 462, 300, 442, 337, 98, 256, 455, 196, 338, 36, 215, 247, 383, 429, 94, 300, 30, 166, 225, 204, 196, 98, 462, 455, 256, 337, 247, 128, 383, 442, 372, 86, 299, 102, 94, 30, 166, 225, 299, 442, 300, 98, 372, 337, 196, 462, 455, 338, 250, 36, 215, 256, 429, 496, 94, 30, 166, 225, 299, 442, 300, 98, 372, 337, 462, 215, 338, 196, 496, 250, 36, 429, 40, 455, 94, 300, 30, 166, 225, 196, 98, 204, 299, 455, 337, 442, 247, 462, 250, 128, 86, 165, 429, 256, 94, 30, 166, 225, 299, 300, 442, 98, 337, 196, 250, 372, 429, 496, 462, 215, 40, 455, 36, 338, 94, 300, 30, 166, 225, 204, 196, 455, 98, 128, 337, 247, 256, 462, 86, 165, 102, 383, 372, 442, 94, 30, 166, 299, 225, 442, 300, 98, 337, 372, 250, 196, 496, 429, 215, 40, 338, 462, 36, 255, 94, 30, 166, 225, 299, 300, 98, 442, 196, 337, 250, 372, 455, 429, 462, 496, 204, 215, 40, 338, 94, 300, 30, 166, 196, 225, 204, 98, 455, 337, 128, 442, 247, 250, 299, 86, 462, 165, 256, 38, 30, 94, 166, 225, 299, 442, 372, 300, 98, 337, 462, 338, 215, 36, 196, 496, 250, 429, 455, 40, 94, 30, 166, 225, 299, 442, 300, 372, 98, 337, 462, 338, 196, 455, 215, 36, 256, 250, 429, 496, 300, 204, 196, 94, 455, 128, 165, 86, 98, 247, 166, 30, 38, 225, 102, 250, 177, 337, 375, 450, 94, 299, 30, 166, 225, 442, 98, 300, 496, 337, 372, 250, 196, 215, 429, 40, 338, 36, 462, 255, 94, 300, 30, 166, 225, 98, 196, 299, 204, 442, 337, 455, 250, 462, 247, 372, 429, 128, 62, 256, 94, 30, 166, 225, 299, 442, 300, 98, 372, 337, 462, 196, 338, 455, 215, 250, 36, 429, 496, 256, 94, 30, 166, 225, 299, 300, 442, 98, 337, 196, 372, 250, 462, 455, 429, 496, 215, 338, 204, 62, 94, 30, 166, 225, 299, 442, 300, 98, 372, 337, 462, 196, 455, 338, 250, 215, 36, 429, 256, 496, 299, 30, 94, 166, 225, 442, 98, 300, 496, 372, 337, 215, 338, 40, 250, 36, 429, 255, 196, 462, 299, 30, 166, 225, 94, 442, 338, 372, 215, 496, 98, 36, 40, 337, 120, 444, 462, 255, 300, 429, 94, 30, 166, 225, 299, 442, 300, 98, 372, 337, 462, 196, 338, 455, 215, 250, 36, 429, 496, 256, 94, 300, 30, 166, 196, 225, 204, 455, 98, 337, 128, 86, 247, 165, 256, 442, 462, 102, 250, 38, 94, 30, 166, 225, 300, 299, 98, 442, 337, 196, 462, 372, 455, 250, 204, 429, 256, 247, 215, 338, 94, 30, 166, 225, 462, 372, 300, 299, 442, 337, 256, 98, 455, 196, 338, 383, 215, 36, 247, 429, 94, 30, 166, 225, 299, 300, 442, 98, 372, 337, 462, 196, 455, 215, 250, 338, 429, 36, 256, 496, 94, 30, 166, 225, 299, 300, 442, 98, 337, 372, 196, 462, 250, 455, 429, 215, 496, 338, 36, 256, 299, 30, 94, 166, 225, 442, 372, 338, 98, 215, 337, 496, 36, 40, 300, 462, 120, 444, 429, 250, 94, 30, 166, 225, 299, 300, 442, 98, 337, 372, 462, 196, 455, 338, 250, 215, 36, 429, 496, 256, 94, 300, 166, 455, 30, 256, 204, 383, 128, 462, 247, 102, 225, 196, 86, 337, 372, 98, 165, 177, 94, 30, 166, 300, 225, 462, 196, 98, 337, 442, 299, 204, 256, 372, 455, 247, 383, 128, 86, 102, 299, 30, 166, 94, 225, 442, 372, 338, 215, 98, 496, 337, 36, 40, 462, 300, 429, 120, 444, 250, 94, 300, 30, 166, 225, 196, 98, 204, 442, 299, 337, 455, 250, 247, 128, 462, 38, 429, 62, 372, 94, 30, 166, 225, 299, 442, 300, 98, 372, 337, 462, 196, 455, 338, 250, 215, 36, 256, 429, 496, 94, 30, 299, 166, 225, 442, 300, 98, 337, 372, 496, 250, 196, 215, 338, 40, 429, 462, 36, 255, 94, 166, 30, 225, 300, 98, 299, 442, 196, 337, 455, 250, 372, 204, 429, 462, 496, 247, 62, 338, 94, 30, 166, 225, 299, 442, 300, 98, 337, 372, 196, 250, 496, 462, 338, 215, 429, 36, 40, 455, 94, 30, 166, 225, 299, 300, 98, 442, 337, 196, 372, 462, 455, 250, 429, 338, 204, 215, 496, 36, 94, 30, 166, 225, 299, 442, 300, 98, 372, 337, 462, 196, 338, 455, 215, 250, 36, 429, 256, 496, 94, 30, 166, 300, 225, 98, 196, 299, 442, 337, 455, 204, 462, 372, 250, 247, 256, 128, 429, 62, 94, 299, 30, 166, 225, 442, 98, 300, 250, 496, 337, 196, 372, 40, 255, 338, 215, 429, 36, 444]

        assert NdcgScore(data, preds, top_k=20) == pytest.approx(0.6625923621370933, abs=5*1e-3)
        preds2 = exp.recommend(users = [1, 2], exclude_known=False)
        assert preds2['user'].unique().tolist() == [1,2]

        preds = exp.recommend(exclude_known=True)
        joined_preds = preds.join(
            data.set_index(['user', 'item']),
            on=['user','item'], how='inner'
        )
        assert len(joined_preds) == 0
